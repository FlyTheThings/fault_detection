/* This file has been generated by gen_periodic from /home/parallels/paparazzi/var/messages.xml and /home/parallels/paparazzi/conf/telemetry/extra_for_fixedwing.xml */
/* Version v5.17_devel-27-g0cc33f961-dirty */
/* Please DO NOT EDIT */

#ifndef _VAR_PERIODIC_H_
#define _VAR_PERIODIC_H_

#include "std.h"
#include "generated/airframe.h"
#include "subsystems/datalink/telemetry_common.h"

#define TELEMETRY_FREQUENCY 120

/* Periodic telemetry messages of type PPRZ */
#define TELEMETRY_PPRZ_MSG_IMU_ACCEL_RAW_IDX 0
#define TELEMETRY_PPRZ_MSG_DESIRED_IDX 1
#define TELEMETRY_PPRZ_MSG_PPM_IDX 2
#define TELEMETRY_PPRZ_MSG_GPS_SOL_IDX 3
#define TELEMETRY_PPRZ_MSG_AIR_DATA_IDX 4
#define TELEMETRY_PPRZ_MSG_ENERGY_IDX 5
#define TELEMETRY_PPRZ_MSG_IMU_GYRO_IDX 6
#define TELEMETRY_PPRZ_MSG_PPRZ_MODE_IDX 7
#define TELEMETRY_PPRZ_MSG_ADC_GENERIC_IDX 8
#define TELEMETRY_PPRZ_MSG_AUTOPILOT_VERSION_IDX 9
#define TELEMETRY_PPRZ_MSG_LOGGER_STATUS_IDX 10
#define TELEMETRY_PPRZ_MSG_STATE_FILTER_STATUS_IDX 11
#define TELEMETRY_PPRZ_MSG_BARO_RAW_IDX 12
#define TELEMETRY_PPRZ_MSG_IMU_MAG_IDX 13
#define TELEMETRY_PPRZ_MSG_SEGMENT_IDX 14
#define TELEMETRY_PPRZ_MSG_IMU_ACCEL_IDX 15
#define TELEMETRY_PPRZ_MSG_CAM_IDX 16
#define TELEMETRY_PPRZ_MSG_SETTINGS_IDX 17
#define TELEMETRY_PPRZ_MSG_ATTITUDE_IDX 18
#define TELEMETRY_PPRZ_MSG_RC_IDX 19
#define TELEMETRY_PPRZ_MSG_COMMANDS_IDX 20
#define TELEMETRY_PPRZ_MSG_WP_MOVED_IDX 21
#define TELEMETRY_PPRZ_MSG_ACTUATORS_IDX 22
#define TELEMETRY_PPRZ_MSG_IMU_GYRO_RAW_IDX 23
#define TELEMETRY_PPRZ_MSG_WIND_INFO_RET_IDX 24
#define TELEMETRY_PPRZ_MSG_SURVEY_IDX 25
#define TELEMETRY_PPRZ_MSG_FBW_STATUS_IDX 26
#define TELEMETRY_PPRZ_MSG_ESC_IDX 27
#define TELEMETRY_PPRZ_MSG_AIRSPEED_IDX 28
#define TELEMETRY_PPRZ_MSG_IMU_MAG_RAW_IDX 29
#define TELEMETRY_PPRZ_MSG_ESTIMATOR_IDX 30
#define TELEMETRY_PPRZ_MSG_GPS_IDX 31
#define TELEMETRY_PPRZ_MSG_ALIVE_IDX 32
#define TELEMETRY_PPRZ_MSG_IR_SENSORS_IDX 33
#define TELEMETRY_PPRZ_MSG_CALIBRATION_IDX 34
#define TELEMETRY_PPRZ_MSG_NAVIGATION_IDX 35
#define TELEMETRY_PPRZ_MSG_AOA_IDX 36
#define TELEMETRY_PPRZ_MSG_CAM_POINT_IDX 37
#define TELEMETRY_PPRZ_MSG_DL_VALUE_IDX 38
#define TELEMETRY_PPRZ_MSG_DATALINK_REPORT_IDX 39
#define TELEMETRY_PPRZ_MSG_NAVIGATION_REF_IDX 40
#define TELEMETRY_PPRZ_MSG_CIRCLE_IDX 41
#define TELEMETRY_PPRZ_NB_MSG 42

#define TELEMETRY_PPRZ_MSG_NAMES { \
  "IMU_ACCEL_RAW", \
  "DESIRED", \
  "PPM", \
  "GPS_SOL", \
  "AIR_DATA", \
  "ENERGY", \
  "IMU_GYRO", \
  "PPRZ_MODE", \
  "ADC_GENERIC", \
  "AUTOPILOT_VERSION", \
  "LOGGER_STATUS", \
  "STATE_FILTER_STATUS", \
  "BARO_RAW", \
  "IMU_MAG", \
  "SEGMENT", \
  "IMU_ACCEL", \
  "CAM", \
  "SETTINGS", \
  "ATTITUDE", \
  "RC", \
  "COMMANDS", \
  "WP_MOVED", \
  "ACTUATORS", \
  "IMU_GYRO_RAW", \
  "WIND_INFO_RET", \
  "SURVEY", \
  "FBW_STATUS", \
  "ESC", \
  "AIRSPEED", \
  "IMU_MAG_RAW", \
  "ESTIMATOR", \
  "GPS", \
  "ALIVE", \
  "IR_SENSORS", \
  "CALIBRATION", \
  "NAVIGATION", \
  "AOA", \
  "CAM_POINT", \
  "DL_VALUE", \
  "DATALINK_REPORT", \
  "NAVIGATION_REF", \
  "CIRCLE", \
}

#define TELEMETRY_PPRZ_CBS { \
  {.id=PPRZ_MSG_ID_IMU_ACCEL_RAW, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_DESIRED, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_PPM, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_GPS_SOL, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_AIR_DATA, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_ENERGY, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_IMU_GYRO, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_PPRZ_MODE, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_ADC_GENERIC, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_AUTOPILOT_VERSION, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_LOGGER_STATUS, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_STATE_FILTER_STATUS, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_BARO_RAW, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_IMU_MAG, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_SEGMENT, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_IMU_ACCEL, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_CAM, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_SETTINGS, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_ATTITUDE, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_RC, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_COMMANDS, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_WP_MOVED, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_ACTUATORS, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_IMU_GYRO_RAW, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_WIND_INFO_RET, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_SURVEY, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_FBW_STATUS, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_ESC, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_AIRSPEED, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_IMU_MAG_RAW, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_ESTIMATOR, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_GPS, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_ALIVE, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_IR_SENSORS, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_CALIBRATION, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_NAVIGATION, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_AOA, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_CAM_POINT, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_DL_VALUE, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_DATALINK_REPORT, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_NAVIGATION_REF, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_CIRCLE, .slots={ NULL }}, \
}


/* Periodic telemetry (type PPRZ): Ap process */
#define TELEMETRY_PROCESS_Ap 0
#define TELEMETRY_MODE_Ap_default 0
#define PERIOD_AUTOPILOT_VERSION_Ap_0 (11.1)
#define PERIOD_AIRSPEED_Ap_0 (1)
#define PERIOD_ALIVE_Ap_0 (5.1)
#define PERIOD_GPS_Ap_0 (0.25)
#define PERIOD_NAVIGATION_Ap_0 (1.)
#define PERIOD_ATTITUDE_Ap_0 (0.1)
#define PERIOD_ESTIMATOR_Ap_0 (0.5)
#define PERIOD_ENERGY_Ap_0 (1.1)
#define PERIOD_WP_MOVED_Ap_0 (0.5)
#define PERIOD_CIRCLE_Ap_0 (1.05)
#define PERIOD_DESIRED_Ap_0 (0.2)
#define PERIOD_SEGMENT_Ap_0 (1.2)
#define PERIOD_CALIBRATION_Ap_0 (2.1)
#define PERIOD_NAVIGATION_REF_Ap_0 (9.)
#define PERIOD_PPRZ_MODE_Ap_0 (4.9)
#define PERIOD_SETTINGS_Ap_0 (5.)
#define PERIOD_STATE_FILTER_STATUS_Ap_0 (2.2)
#define PERIOD_DATALINK_REPORT_Ap_0 (5.1)
#define PERIOD_DL_VALUE_Ap_0 (1.5)
#define PERIOD_IR_SENSORS_Ap_0 (1.2)
#define PERIOD_SURVEY_Ap_0 (2.1)
#define PERIOD_GPS_SOL_Ap_0 (2.0)
#define PERIOD_IMU_ACCEL_Ap_0 (.8)
#define PERIOD_IMU_GYRO_Ap_0 (.6)
#define PERIOD_IMU_MAG_Ap_0 (1.3)
#define PERIOD_CAM_Ap_0 (0.5)
#define PERIOD_CAM_POINT_Ap_0 (1.0)
#define PERIOD_COMMANDS_Ap_0 (5)
#define PERIOD_FBW_STATUS_Ap_0 (2)
#define PERIOD_AIR_DATA_Ap_0 (1.3)
#define PERIOD_ESC_Ap_0 (0.9)
#define PERIOD_LOGGER_STATUS_Ap_0 (5.1)
#define PERIOD_WIND_INFO_RET_Ap_0 (0.1)
#define TELEMETRY_MODE_Ap_minimal 1
#define PERIOD_ALIVE_Ap_1 (5)
#define PERIOD_ATTITUDE_Ap_1 (4)
#define PERIOD_GPS_Ap_1 (1.05)
#define PERIOD_ESTIMATOR_Ap_1 (1.3)
#define PERIOD_WP_MOVED_Ap_1 (1.4)
#define PERIOD_CIRCLE_Ap_1 (3.05)
#define PERIOD_DESIRED_Ap_1 (4.05)
#define PERIOD_ENERGY_Ap_1 (1.1)
#define PERIOD_SEGMENT_Ap_1 (3.2)
#define PERIOD_CALIBRATION_Ap_1 (5.1)
#define PERIOD_NAVIGATION_REF_Ap_1 (9.)
#define PERIOD_NAVIGATION_Ap_1 (3.)
#define PERIOD_PPRZ_MODE_Ap_1 (5.)
#define PERIOD_STATE_FILTER_STATUS_Ap_1 (5.)
#define PERIOD_DATALINK_REPORT_Ap_1 (5.1)
#define PERIOD_DL_VALUE_Ap_1 (1.5)
#define PERIOD_IR_SENSORS_Ap_1 (5.2)
#define PERIOD_SURVEY_Ap_1 (2.1)
#define PERIOD_GPS_SOL_Ap_1 (5.0)
#define TELEMETRY_MODE_Ap_extremal 2
#define PERIOD_ALIVE_Ap_2 (5)
#define PERIOD_GPS_Ap_2 (5.1)
#define PERIOD_ESTIMATOR_Ap_2 (5.3)
#define PERIOD_ENERGY_Ap_2 (10.1)
#define PERIOD_DESIRED_Ap_2 (10.2)
#define PERIOD_NAVIGATION_Ap_2 (5.4)
#define PERIOD_PPRZ_MODE_Ap_2 (7.5)
#define PERIOD_STATE_FILTER_STATUS_Ap_2 (8.)
#define PERIOD_DATALINK_REPORT_Ap_2 (5.7)
#define TELEMETRY_MODE_Ap_raw_sensors 3
#define PERIOD_DL_VALUE_Ap_3 (0.5)
#define PERIOD_ALIVE_Ap_3 (2.1)
#define PERIOD_IMU_ACCEL_RAW_Ap_3 (.05)
#define PERIOD_IMU_GYRO_RAW_Ap_3 (.05)
#define PERIOD_IMU_MAG_RAW_Ap_3 (.05)
#define PERIOD_BARO_RAW_Ap_3 (0.5)
#define TELEMETRY_MODE_Ap_scaled_sensors 4
#define PERIOD_DL_VALUE_Ap_4 (0.5)
#define PERIOD_ALIVE_Ap_4 (2.1)
#define PERIOD_IMU_GYRO_Ap_4 (.075)
#define PERIOD_IMU_ACCEL_Ap_4 (.075)
#define PERIOD_IMU_MAG_Ap_4 (.1)
#define TELEMETRY_MODE_Ap_debug_imu 5
#define PERIOD_ATTITUDE_Ap_5 (0.1)
#define PERIOD_ALIVE_Ap_5 (5)
#define PERIOD_GPS_Ap_5 (5.1)
#define PERIOD_ESTIMATOR_Ap_5 (5.3)
#define PERIOD_ENERGY_Ap_5 (10.1)
#define PERIOD_DESIRED_Ap_5 (10.2)
#define PERIOD_NAVIGATION_Ap_5 (5.4)
#define PERIOD_PPRZ_MODE_Ap_5 (5.5)
#define PERIOD_STATE_FILTER_STATUS_Ap_5 (5.)
#define PERIOD_DATALINK_REPORT_Ap_5 (5.7)
#define PERIOD_IMU_ACCEL_Ap_5 (.5)
#define PERIOD_IMU_GYRO_Ap_5 (.5)
#define PERIOD_IMU_MAG_Ap_5 (.5)
#define PERIOD_IMU_ACCEL_RAW_Ap_5 (.5)
#define PERIOD_IMU_GYRO_RAW_Ap_5 (.5)
#define PERIOD_IMU_MAG_RAW_Ap_5 (.5)

/* Functions for Ap process */
#ifdef PERIODIC_C_AP
#ifndef TELEMETRY_MODE_AP
#define TELEMETRY_MODE_AP 0
#endif
uint8_t telemetry_mode_Ap = TELEMETRY_MODE_AP;
#else /* PERIODIC_C_AP not defined (general header) */
extern uint8_t telemetry_mode_Ap;
#endif /* PERIODIC_C_AP */
static inline void periodic_telemetry_send_Ap(struct periodic_telemetry *telemetry, struct transport_tx *trans, struct link_device *dev) {  /* 120Hz */
  if (telemetry_mode_Ap == TELEMETRY_MODE_Ap_default) {
    static uint8_t i12 = 0; i12++; if (i12>=12) i12=0;
    static uint8_t i24 = 0; i24++; if (i24>=24) i24=0;
    static uint8_t i30 = 0; i30++; if (i30>=30) i30=0;
    static uint8_t i60 = 0; i60++; if (i60>=60) i60=0;
    static uint8_t i72 = 0; i72++; if (i72>=72) i72=0;
    static uint8_t i96 = 0; i96++; if (i96>=96) i96=0;
    static uint8_t i108 = 0; i108++; if (i108>=108) i108=0;
    static uint8_t i120 = 0; i120++; if (i120>=120) i120=0;
    static uint8_t i126 = 0; i126++; if (i126>=126) i126=0;
    static uint8_t i132 = 0; i132++; if (i132>=132) i132=0;
    static uint8_t i144 = 0; i144++; if (i144>=144) i144=0;
    static uint8_t i156 = 0; i156++; if (i156>=156) i156=0;
    static uint8_t i180 = 0; i180++; if (i180>=180) i180=0;
    static uint8_t i240 = 0; i240++; if (i240>=240) i240=0;
    static uint8_t i252 = 0; i252++; if (i252>=252) i252=0;
    static uint16_t i264 = 0; i264++; if (i264>=264) i264=0;
    static uint16_t i588 = 0; i588++; if (i588>=588) i588=0;
    static uint16_t i600 = 0; i600++; if (i600>=600) i600=0;
    static uint16_t i612 = 0; i612++; if (i612>=612) i612=0;
    static uint16_t i1080 = 0; i1080++; if (i1080>=1080) i1080=0;
    static uint16_t i1332 = 0; i1332++; if (i1332>=1332) i1332=0;
    uint8_t j;
    if (i1332 == 0) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_AUTOPILOT_VERSION_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_AUTOPILOT_VERSION_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_AUTOPILOT_VERSION);
#endif
    }
    if (i1080 == 12) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_NAVIGATION_REF_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_NAVIGATION_REF_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_NAVIGATION_REF);
#endif
    }
    if (i612 == 24) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_LOGGER_STATUS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_LOGGER_STATUS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_LOGGER_STATUS);
#endif
    }
    else if (i612 == 36) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_DATALINK_REPORT_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_DATALINK_REPORT_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_DATALINK_REPORT);
#endif
    }
    else if (i612 == 48) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_ALIVE);
#endif
    }
    if (i600 == 60) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_COMMANDS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_COMMANDS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_COMMANDS);
#endif
    }
    else if (i600 == 72) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_SETTINGS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_SETTINGS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_SETTINGS);
#endif
    }
    if (i588 == 84) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_PPRZ_MODE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_PPRZ_MODE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_PPRZ_MODE);
#endif
    }
    if (i264 == 96) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_STATE_FILTER_STATUS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_STATE_FILTER_STATUS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_STATE_FILTER_STATUS);
#endif
    }
    if (i252 == 108) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_SURVEY_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_SURVEY_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_SURVEY);
#endif
    }
    else if (i252 == 120) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_CALIBRATION_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_CALIBRATION_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_CALIBRATION);
#endif
    }
    if (i240 == 132) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_FBW_STATUS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_FBW_STATUS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_FBW_STATUS);
#endif
    }
    else if (i240 == 144) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_GPS_SOL_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_GPS_SOL_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_GPS_SOL);
#endif
    }
    if (i180 == 156) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_DL_VALUE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_DL_VALUE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_DL_VALUE);
#endif
    }
    if (i156 == 12) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_AIR_DATA_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_AIR_DATA_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_AIR_DATA);
#endif
    }
    else if (i156 == 24) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_MAG_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_MAG_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_IMU_MAG);
#endif
    }
    if (i144 == 36) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_IR_SENSORS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_IR_SENSORS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_IR_SENSORS);
#endif
    }
    else if (i144 == 48) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_SEGMENT_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_SEGMENT_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_SEGMENT);
#endif
    }
    if (i132 == 60) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ENERGY_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ENERGY_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_ENERGY);
#endif
    }
    if (i126 == 72) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_CIRCLE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_CIRCLE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_CIRCLE);
#endif
    }
    if (i120 == 84) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_CAM_POINT_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_CAM_POINT_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_CAM_POINT);
#endif
    }
    else if (i120 == 96) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_NAVIGATION_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_NAVIGATION_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_NAVIGATION);
#endif
    }
    else if (i120 == 108) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_AIRSPEED_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_AIRSPEED_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_AIRSPEED);
#endif
    }
    if (i108 == 12) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ESC_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ESC_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_ESC);
#endif
    }
    if (i96 == 24) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_ACCEL_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_ACCEL_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_IMU_ACCEL);
#endif
    }
    if (i72 == 36) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_GYRO_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_GYRO_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_IMU_GYRO);
#endif
    }
    if (i60 == 48) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_CAM_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_CAM_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_CAM);
#endif
    }
    else if (i60 == 0) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_WP_MOVED_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_WP_MOVED_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_WP_MOVED);
#endif
    }
    else if (i60 == 12) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ESTIMATOR_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ESTIMATOR_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_ESTIMATOR);
#endif
    }
    if (i30 == 24) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_GPS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_GPS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_GPS);
#endif
    }
    if (i24 == 12) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_DESIRED_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_DESIRED_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_DESIRED);
#endif
    }
    if (i12 == 0) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_WIND_INFO_RET_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_WIND_INFO_RET_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_WIND_INFO_RET);
#endif
    }
    if (i12 == 0) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ATTITUDE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ATTITUDE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_ATTITUDE);
#endif
    }
  }
  if (telemetry_mode_Ap == TELEMETRY_MODE_Ap_minimal) {
    static uint8_t i126 = 0; i126++; if (i126>=126) i126=0;
    static uint8_t i132 = 0; i132++; if (i132>=132) i132=0;
    static uint8_t i156 = 0; i156++; if (i156>=156) i156=0;
    static uint8_t i168 = 0; i168++; if (i168>=168) i168=0;
    static uint8_t i180 = 0; i180++; if (i180>=180) i180=0;
    static uint8_t i252 = 0; i252++; if (i252>=252) i252=0;
    static uint16_t i360 = 0; i360++; if (i360>=360) i360=0;
    static uint16_t i366 = 0; i366++; if (i366>=366) i366=0;
    static uint16_t i384 = 0; i384++; if (i384>=384) i384=0;
    static uint16_t i480 = 0; i480++; if (i480>=480) i480=0;
    static uint16_t i486 = 0; i486++; if (i486>=486) i486=0;
    static uint16_t i600 = 0; i600++; if (i600>=600) i600=0;
    static uint16_t i612 = 0; i612++; if (i612>=612) i612=0;
    static uint16_t i624 = 0; i624++; if (i624>=624) i624=0;
    static uint16_t i1080 = 0; i1080++; if (i1080>=1080) i1080=0;
    uint8_t j;
    if (i1080 == 0) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_NAVIGATION_REF_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_NAVIGATION_REF_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_NAVIGATION_REF);
#endif
    }
    if (i624 == 12) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_IR_SENSORS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_IR_SENSORS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_IR_SENSORS);
#endif
    }
    if (i612 == 24) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_DATALINK_REPORT_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_DATALINK_REPORT_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_DATALINK_REPORT);
#endif
    }
    else if (i612 == 36) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_CALIBRATION_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_CALIBRATION_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_CALIBRATION);
#endif
    }
    if (i600 == 48) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_GPS_SOL_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_GPS_SOL_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_GPS_SOL);
#endif
    }
    else if (i600 == 60) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_STATE_FILTER_STATUS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_STATE_FILTER_STATUS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_STATE_FILTER_STATUS);
#endif
    }
    else if (i600 == 72) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_PPRZ_MODE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_PPRZ_MODE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_PPRZ_MODE);
#endif
    }
    else if (i600 == 84) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_ALIVE);
#endif
    }
    if (i486 == 96) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_DESIRED_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_DESIRED_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_DESIRED);
#endif
    }
    if (i480 == 108) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ATTITUDE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ATTITUDE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_ATTITUDE);
#endif
    }
    if (i384 == 120) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_SEGMENT_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_SEGMENT_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_SEGMENT);
#endif
    }
    if (i366 == 132) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_CIRCLE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_CIRCLE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_CIRCLE);
#endif
    }
    if (i360 == 144) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_NAVIGATION_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_NAVIGATION_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_NAVIGATION);
#endif
    }
    if (i252 == 156) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_SURVEY_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_SURVEY_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_SURVEY);
#endif
    }
    if (i180 == 168) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_DL_VALUE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_DL_VALUE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_DL_VALUE);
#endif
    }
    if (i168 == 12) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_WP_MOVED_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_WP_MOVED_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_WP_MOVED);
#endif
    }
    if (i156 == 24) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ESTIMATOR_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ESTIMATOR_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_ESTIMATOR);
#endif
    }
    if (i132 == 36) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ENERGY_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ENERGY_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_ENERGY);
#endif
    }
    if (i126 == 48) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_GPS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_GPS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_GPS);
#endif
    }
  }
  if (telemetry_mode_Ap == TELEMETRY_MODE_Ap_extremal) {
    static uint16_t i600 = 0; i600++; if (i600>=600) i600=0;
    static uint16_t i612 = 0; i612++; if (i612>=612) i612=0;
    static uint16_t i636 = 0; i636++; if (i636>=636) i636=0;
    static uint16_t i648 = 0; i648++; if (i648>=648) i648=0;
    static uint16_t i684 = 0; i684++; if (i684>=684) i684=0;
    static uint16_t i900 = 0; i900++; if (i900>=900) i900=0;
    static uint16_t i960 = 0; i960++; if (i960>=960) i960=0;
    static uint16_t i1212 = 0; i1212++; if (i1212>=1212) i1212=0;
    static uint16_t i1224 = 0; i1224++; if (i1224>=1224) i1224=0;
    uint8_t j;
    if (i1224 == 0) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_DESIRED_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_DESIRED_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_DESIRED);
#endif
    }
    if (i1212 == 12) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ENERGY_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ENERGY_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_ENERGY);
#endif
    }
    if (i960 == 24) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_STATE_FILTER_STATUS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_STATE_FILTER_STATUS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_STATE_FILTER_STATUS);
#endif
    }
    if (i900 == 36) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_PPRZ_MODE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_PPRZ_MODE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_PPRZ_MODE);
#endif
    }
    if (i684 == 48) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_DATALINK_REPORT_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_DATALINK_REPORT_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_DATALINK_REPORT);
#endif
    }
    if (i648 == 60) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_NAVIGATION_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_NAVIGATION_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_NAVIGATION);
#endif
    }
    if (i636 == 72) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ESTIMATOR_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ESTIMATOR_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_ESTIMATOR);
#endif
    }
    if (i612 == 84) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_GPS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_GPS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_GPS);
#endif
    }
    if (i600 == 96) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_ALIVE);
#endif
    }
  }
  if (telemetry_mode_Ap == TELEMETRY_MODE_Ap_raw_sensors) {
    static uint8_t i6 = 0; i6++; if (i6>=6) i6=0;
    static uint8_t i60 = 0; i60++; if (i60>=60) i60=0;
    static uint8_t i252 = 0; i252++; if (i252>=252) i252=0;
    uint8_t j;
    if (i252 == 0) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_ALIVE);
#endif
    }
    if (i60 == 12) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_BARO_RAW_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_BARO_RAW_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_BARO_RAW);
#endif
    }
    else if (i60 == 24) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_DL_VALUE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_DL_VALUE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_DL_VALUE);
#endif
    }
    if (i6 == 0) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_MAG_RAW_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_MAG_RAW_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_IMU_MAG_RAW);
#endif
    }
    if (i6 == 0) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_GYRO_RAW_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_GYRO_RAW_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_IMU_GYRO_RAW);
#endif
    }
    if (i6 == 0) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_ACCEL_RAW_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_ACCEL_RAW_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_IMU_ACCEL_RAW);
#endif
    }
  }
  if (telemetry_mode_Ap == TELEMETRY_MODE_Ap_scaled_sensors) {
    static uint8_t i9 = 0; i9++; if (i9>=9) i9=0;
    static uint8_t i12 = 0; i12++; if (i12>=12) i12=0;
    static uint8_t i60 = 0; i60++; if (i60>=60) i60=0;
    static uint8_t i252 = 0; i252++; if (i252>=252) i252=0;
    uint8_t j;
    if (i252 == 0) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_ALIVE);
#endif
    }
    if (i60 == 12) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_DL_VALUE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_DL_VALUE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_DL_VALUE);
#endif
    }
    if (i12 == 0) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_MAG_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_MAG_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_IMU_MAG);
#endif
    }
    if (i9 == 3) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_ACCEL_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_ACCEL_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_IMU_ACCEL);
#endif
    }
    else if (i9 == 6) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_GYRO_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_GYRO_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_IMU_GYRO);
#endif
    }
  }
  if (telemetry_mode_Ap == TELEMETRY_MODE_Ap_debug_imu) {
    static uint8_t i12 = 0; i12++; if (i12>=12) i12=0;
    static uint8_t i60 = 0; i60++; if (i60>=60) i60=0;
    static uint16_t i600 = 0; i600++; if (i600>=600) i600=0;
    static uint16_t i612 = 0; i612++; if (i612>=612) i612=0;
    static uint16_t i636 = 0; i636++; if (i636>=636) i636=0;
    static uint16_t i648 = 0; i648++; if (i648>=648) i648=0;
    static uint16_t i660 = 0; i660++; if (i660>=660) i660=0;
    static uint16_t i684 = 0; i684++; if (i684>=684) i684=0;
    static uint16_t i1212 = 0; i1212++; if (i1212>=1212) i1212=0;
    static uint16_t i1224 = 0; i1224++; if (i1224>=1224) i1224=0;
    uint8_t j;
    if (i1224 == 0) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_DESIRED_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_DESIRED_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_DESIRED);
#endif
    }
    if (i1212 == 12) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ENERGY_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ENERGY_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_ENERGY);
#endif
    }
    if (i684 == 24) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_DATALINK_REPORT_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_DATALINK_REPORT_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_DATALINK_REPORT);
#endif
    }
    if (i660 == 36) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_PPRZ_MODE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_PPRZ_MODE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_PPRZ_MODE);
#endif
    }
    if (i648 == 48) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_NAVIGATION_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_NAVIGATION_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_NAVIGATION);
#endif
    }
    if (i636 == 60) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ESTIMATOR_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ESTIMATOR_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_ESTIMATOR);
#endif
    }
    if (i612 == 72) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_GPS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_GPS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_GPS);
#endif
    }
    if (i600 == 84) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_STATE_FILTER_STATUS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_STATE_FILTER_STATUS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_STATE_FILTER_STATUS);
#endif
    }
    else if (i600 == 96) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_ALIVE);
#endif
    }
    if (i60 == 48) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_MAG_RAW_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_MAG_RAW_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_IMU_MAG_RAW);
#endif
    }
    else if (i60 == 0) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_GYRO_RAW_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_GYRO_RAW_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_IMU_GYRO_RAW);
#endif
    }
    else if (i60 == 12) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_ACCEL_RAW_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_ACCEL_RAW_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_IMU_ACCEL_RAW);
#endif
    }
    else if (i60 == 24) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_MAG_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_MAG_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_IMU_MAG);
#endif
    }
    else if (i60 == 36) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_GYRO_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_GYRO_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_IMU_GYRO);
#endif
    }
    if (i60 == 48) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_ACCEL_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_ACCEL_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_IMU_ACCEL);
#endif
    }
    if (i12 == 0) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ATTITUDE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ATTITUDE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_ATTITUDE);
#endif
    }
  }
}

/* Periodic telemetry (type PPRZ): Fbw process */
#define TELEMETRY_PROCESS_Fbw 0
#define TELEMETRY_MODE_Fbw_default 0
#define PERIOD_COMMANDS_Fbw_0 (5)
#define PERIOD_FBW_STATUS_Fbw_0 (2)
#define PERIOD_ACTUATORS_Fbw_0 (5)
#define TELEMETRY_MODE_Fbw_debug 1
#define PERIOD_PPM_Fbw_1 (0.5)
#define PERIOD_RC_Fbw_1 (0.5)
#define PERIOD_COMMANDS_Fbw_1 (0.5)
#define PERIOD_FBW_STATUS_Fbw_1 (1)
#define PERIOD_ACTUATORS_Fbw_1 (5)

/* Functions for Fbw process */
#ifdef PERIODIC_C_FBW
#ifndef TELEMETRY_MODE_FBW
#define TELEMETRY_MODE_FBW 0
#endif
uint8_t telemetry_mode_Fbw = TELEMETRY_MODE_FBW;
#else /* PERIODIC_C_FBW not defined (general header) */
extern uint8_t telemetry_mode_Fbw;
#endif /* PERIODIC_C_FBW */
static inline void periodic_telemetry_send_Fbw(struct periodic_telemetry *telemetry, struct transport_tx *trans, struct link_device *dev) {  /* 120Hz */
  if (telemetry_mode_Fbw == TELEMETRY_MODE_Fbw_default) {
    static uint8_t i240 = 0; i240++; if (i240>=240) i240=0;
    static uint16_t i600 = 0; i600++; if (i600>=600) i600=0;
    uint8_t j;
    if (i600 == 0) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ACTUATORS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ACTUATORS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Fbw, telemetry_mode_Fbw, PPRZ_MSG_ID_ACTUATORS);
#endif
    }
    else if (i600 == 12) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_COMMANDS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_COMMANDS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Fbw, telemetry_mode_Fbw, PPRZ_MSG_ID_COMMANDS);
#endif
    }
    if (i240 == 24) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_FBW_STATUS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_FBW_STATUS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Fbw, telemetry_mode_Fbw, PPRZ_MSG_ID_FBW_STATUS);
#endif
    }
  }
  if (telemetry_mode_Fbw == TELEMETRY_MODE_Fbw_debug) {
    static uint8_t i60 = 0; i60++; if (i60>=60) i60=0;
    static uint8_t i120 = 0; i120++; if (i120>=120) i120=0;
    static uint16_t i600 = 0; i600++; if (i600>=600) i600=0;
    uint8_t j;
    if (i600 == 0) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ACTUATORS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ACTUATORS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Fbw, telemetry_mode_Fbw, PPRZ_MSG_ID_ACTUATORS);
#endif
    }
    if (i120 == 12) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_FBW_STATUS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_FBW_STATUS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Fbw, telemetry_mode_Fbw, PPRZ_MSG_ID_FBW_STATUS);
#endif
    }
    if (i60 == 24) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_COMMANDS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_COMMANDS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Fbw, telemetry_mode_Fbw, PPRZ_MSG_ID_COMMANDS);
#endif
    }
    else if (i60 == 36) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_RC_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_RC_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Fbw, telemetry_mode_Fbw, PPRZ_MSG_ID_RC);
#endif
    }
    else if (i60 == 48) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_PPM_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_PPM_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Fbw, telemetry_mode_Fbw, PPRZ_MSG_ID_PPM);
#endif
    }
  }
}

/* Periodic telemetry (type PPRZ): FlightRecorder process */
#define TELEMETRY_PROCESS_FlightRecorder 0
#define TELEMETRY_MODE_FlightRecorder_default 0
#define PERIOD_ENERGY_FlightRecorder_0 (0.5)
#define PERIOD_GPS_FlightRecorder_0 (0.2)
#define PERIOD_ATTITUDE_FlightRecorder_0 (0.05)
#define PERIOD_DESIRED_FlightRecorder_0 (0.05)
#define PERIOD_IMU_ACCEL_FlightRecorder_0 (.02)
#define PERIOD_IMU_GYRO_FlightRecorder_0 (.02)
#define PERIOD_IMU_MAG_FlightRecorder_0 (.02)
#define PERIOD_AIR_DATA_FlightRecorder_0 (0.05)
#define PERIOD_AOA_FlightRecorder_0 (0.05)
#define PERIOD_RC_FlightRecorder_0 (0.05)
#define PERIOD_COMMANDS_FlightRecorder_0 (0.05)
#define PERIOD_ACTUATORS_FlightRecorder_0 (0.05)
#define PERIOD_PPRZ_MODE_FlightRecorder_0 (1.0)
#define PERIOD_FBW_STATUS_FlightRecorder_0 (1.0)
#define PERIOD_NAVIGATION_FlightRecorder_0 (1.0)
#define PERIOD_DATALINK_REPORT_FlightRecorder_0 (1.0)
#define PERIOD_ESC_FlightRecorder_0 (0.1)
#define PERIOD_ADC_GENERIC_FlightRecorder_0 (0.05)
#define PERIOD_WIND_INFO_RET_FlightRecorder_0 (0.1)

/* Functions for FlightRecorder process */
#ifdef PERIODIC_C_FLIGHTRECORDER
#ifndef TELEMETRY_MODE_FLIGHTRECORDER
#define TELEMETRY_MODE_FLIGHTRECORDER 0
#endif
uint8_t telemetry_mode_FlightRecorder = TELEMETRY_MODE_FLIGHTRECORDER;
#else /* PERIODIC_C_FLIGHTRECORDER not defined (general header) */
extern uint8_t telemetry_mode_FlightRecorder;
#endif /* PERIODIC_C_FLIGHTRECORDER */
static inline void periodic_telemetry_send_FlightRecorder(struct periodic_telemetry *telemetry, struct transport_tx *trans, struct link_device *dev) {  /* 120Hz */
  if (telemetry_mode_FlightRecorder == TELEMETRY_MODE_FlightRecorder_default) {
    static uint8_t i2 = 0; i2++; if (i2>=2) i2=0;
    static uint8_t i6 = 0; i6++; if (i6>=6) i6=0;
    static uint8_t i12 = 0; i12++; if (i12>=12) i12=0;
    static uint8_t i24 = 0; i24++; if (i24>=24) i24=0;
    static uint8_t i60 = 0; i60++; if (i60>=60) i60=0;
    static uint8_t i120 = 0; i120++; if (i120>=120) i120=0;
    uint8_t j;
    if (i120 == 0) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_DATALINK_REPORT_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_DATALINK_REPORT_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_FlightRecorder, telemetry_mode_FlightRecorder, PPRZ_MSG_ID_DATALINK_REPORT);
#endif
    }
    else if (i120 == 12) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_NAVIGATION_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_NAVIGATION_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_FlightRecorder, telemetry_mode_FlightRecorder, PPRZ_MSG_ID_NAVIGATION);
#endif
    }
    else if (i120 == 24) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_FBW_STATUS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_FBW_STATUS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_FlightRecorder, telemetry_mode_FlightRecorder, PPRZ_MSG_ID_FBW_STATUS);
#endif
    }
    else if (i120 == 36) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_PPRZ_MODE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_PPRZ_MODE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_FlightRecorder, telemetry_mode_FlightRecorder, PPRZ_MSG_ID_PPRZ_MODE);
#endif
    }
    if (i60 == 48) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ENERGY_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ENERGY_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_FlightRecorder, telemetry_mode_FlightRecorder, PPRZ_MSG_ID_ENERGY);
#endif
    }
    if (i24 == 12) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_GPS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_GPS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_FlightRecorder, telemetry_mode_FlightRecorder, PPRZ_MSG_ID_GPS);
#endif
    }
    if (i12 == 0) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_WIND_INFO_RET_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_WIND_INFO_RET_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_FlightRecorder, telemetry_mode_FlightRecorder, PPRZ_MSG_ID_WIND_INFO_RET);
#endif
    }
    if (i12 == 0) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ESC_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ESC_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_FlightRecorder, telemetry_mode_FlightRecorder, PPRZ_MSG_ID_ESC);
#endif
    }
    if (i6 == 0) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ADC_GENERIC_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ADC_GENERIC_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_FlightRecorder, telemetry_mode_FlightRecorder, PPRZ_MSG_ID_ADC_GENERIC);
#endif
    }
    if (i6 == 0) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ACTUATORS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ACTUATORS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_FlightRecorder, telemetry_mode_FlightRecorder, PPRZ_MSG_ID_ACTUATORS);
#endif
    }
    if (i6 == 0) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_COMMANDS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_COMMANDS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_FlightRecorder, telemetry_mode_FlightRecorder, PPRZ_MSG_ID_COMMANDS);
#endif
    }
    if (i6 == 0) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_RC_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_RC_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_FlightRecorder, telemetry_mode_FlightRecorder, PPRZ_MSG_ID_RC);
#endif
    }
    if (i6 == 0) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_AOA_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_AOA_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_FlightRecorder, telemetry_mode_FlightRecorder, PPRZ_MSG_ID_AOA);
#endif
    }
    if (i6 == 0) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_AIR_DATA_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_AIR_DATA_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_FlightRecorder, telemetry_mode_FlightRecorder, PPRZ_MSG_ID_AIR_DATA);
#endif
    }
    if (i6 == 0) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_DESIRED_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_DESIRED_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_FlightRecorder, telemetry_mode_FlightRecorder, PPRZ_MSG_ID_DESIRED);
#endif
    }
    if (i6 == 0) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ATTITUDE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ATTITUDE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_FlightRecorder, telemetry_mode_FlightRecorder, PPRZ_MSG_ID_ATTITUDE);
#endif
    }
    if (i2 == 0) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_MAG_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_MAG_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_FlightRecorder, telemetry_mode_FlightRecorder, PPRZ_MSG_ID_IMU_MAG);
#endif
    }
    if (i2 == 0) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_GYRO_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_GYRO_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_FlightRecorder, telemetry_mode_FlightRecorder, PPRZ_MSG_ID_IMU_GYRO);
#endif
    }
    if (i2 == 0) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_ACCEL_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_ACCEL_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_FlightRecorder, telemetry_mode_FlightRecorder, PPRZ_MSG_ID_IMU_ACCEL);
#endif
    }
  }
}

/* Periodic telemetry (type PPRZ): Extra process */
#define TELEMETRY_PROCESS_Extra 0
#define TELEMETRY_MODE_Extra_default 0
#define PERIOD_ALIVE_Extra_0 (11.1)
#define PERIOD_GPS_Extra_0 (1.1)
#define PERIOD_IMU_ACCEL_Extra_0 (0.1)
#define PERIOD_IMU_GYRO_Extra_0 (0.1)
#define PERIOD_COMMANDS_Extra_0 (0.1)
#define PERIOD_AIR_DATA_Extra_0 (0.1)

/* Functions for Extra process */
#ifdef PERIODIC_C_EXTRA
#ifndef TELEMETRY_MODE_EXTRA
#define TELEMETRY_MODE_EXTRA 0
#endif
uint8_t telemetry_mode_Extra = TELEMETRY_MODE_EXTRA;
#else /* PERIODIC_C_EXTRA not defined (general header) */
extern uint8_t telemetry_mode_Extra;
#endif /* PERIODIC_C_EXTRA */
static inline void periodic_telemetry_send_Extra(struct periodic_telemetry *telemetry, struct transport_tx *trans, struct link_device *dev) {  /* 120Hz */
  if (telemetry_mode_Extra == TELEMETRY_MODE_Extra_default) {
    static uint8_t i12 = 0; i12++; if (i12>=12) i12=0;
    static uint8_t i132 = 0; i132++; if (i132>=132) i132=0;
    static uint16_t i1332 = 0; i1332++; if (i1332>=1332) i1332=0;
    uint8_t j;
    if (i1332 == 0) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Extra, telemetry_mode_Extra, PPRZ_MSG_ID_ALIVE);
#endif
    }
    if (i132 == 12) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_GPS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_GPS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Extra, telemetry_mode_Extra, PPRZ_MSG_ID_GPS);
#endif
    }
    if (i12 == 0) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_AIR_DATA_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_AIR_DATA_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Extra, telemetry_mode_Extra, PPRZ_MSG_ID_AIR_DATA);
#endif
    }
    if (i12 == 0) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_COMMANDS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_COMMANDS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Extra, telemetry_mode_Extra, PPRZ_MSG_ID_COMMANDS);
#endif
    }
    if (i12 == 0) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_GYRO_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_GYRO_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Extra, telemetry_mode_Extra, PPRZ_MSG_ID_IMU_GYRO);
#endif
    }
    if (i12 == 0) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_ACCEL_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_ACCEL_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Extra, telemetry_mode_Extra, PPRZ_MSG_ID_IMU_ACCEL);
#endif
    }
  }
}
#endif // _VAR_PERIODIC_H_
